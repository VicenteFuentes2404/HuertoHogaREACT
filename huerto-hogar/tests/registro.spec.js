// tests/registro.spec.js
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import Registro from "../src/pages/Registro.jsx";

describe("üß™ Pruebas del formulario Registro.jsx", () => {

  // üîπ TEST 1: Renderizado del t√≠tulo
  it("1Ô∏è‚É£ Deber√≠a renderizar el t√≠tulo del formulario correctamente", () => {
    render(<Registro />);
    // Con Jasmine, verificamos que el elemento no sea nulo, lo que confirma que fue encontrado.
    expect(screen.getByText(/Registro de usuario/i)).not.toBeNull();
  });

  // üîπ TEST 2: Validaci√≥n de nombre vac√≠o
  it("2Ô∏è‚É£ Deber√≠a mostrar error si el nombre est√° vac√≠o", () => {
    render(<Registro />);
    const form = screen.getByRole("form", { name: /registro/i });
    fireEvent.submit(form);
    expect(screen.getByText(/El nombre completo es obligatorio/i)).not.toBeNull();
  });

  // üîπ TEST 3: Validaci√≥n de dominio de correo
  it("3Ô∏è‚É£ Deber√≠a mostrar error si el correo no tiene un dominio permitido", () => {
    render(<Registro />);
    const correoInput = screen.getByLabelText(/Correo/i);
    fireEvent.input(correoInput, { target: { value: "usuario@otrodominio.com" } });
    const form = screen.getByRole("form", { name: /registro/i });
    fireEvent.submit(form);
    expect(screen.getByText(/@duoc\.cl|@profesor\.duoc\.cl|@gmail\.com/i)).not.toBeNull();
  });

  // üîπ TEST 4: Contrase√±as no coinciden
  it("4Ô∏è‚É£ Deber√≠a mostrar error si las contrase√±as no coinciden", () => {
    render(<Registro />);
    // Usamos el texto exacto de la etiqueta para evitar ambig√ºedad
    const passwordInput = screen.getByLabelText("Contrase√±a");
    const confirmInput = screen.getByLabelText("Confirmar contrase√±a");

    fireEvent.input(passwordInput, { target: { value: "abcd" } });
    fireEvent.input(confirmInput, { target: { value: "xyz" } });

    const form = screen.getByRole("form", { name: /registro/i });
    fireEvent.submit(form);

    expect(screen.getByText(/no coinciden/i)).not.toBeNull();
  });

  // üîπ TEST 5: Registro exitoso y limpieza del formulario
  it("5Ô∏è‚É£ Deber√≠a limpiar el formulario tras un registro exitoso", () => {
    render(<Registro />);
    // Usamos spyOn, que es la funci√≥n nativa de Jasmine para espiar m√©todos.
    spyOn(window, 'alert').and.stub();

    fireEvent.input(screen.getByLabelText(/Nombre completo/i), { target: { value: "Juan P√©rez" } });
    fireEvent.input(screen.getByLabelText(/Correo/i), { target: { value: "juan@duoc.cl" } });
    fireEvent.input(screen.getByLabelText("Contrase√±a"), { target: { value: "1234" } });
    fireEvent.input(screen.getByLabelText("Confirmar contrase√±a"), { target: { value: "1234" } });
    fireEvent.input(screen.getByLabelText(/Tel√©fono/i), { target: { value: "987654321" } });
    fireEvent.change(screen.getByLabelText(/Regi√≥n/i), { target: { value: "1" } });
    fireEvent.change(screen.getByLabelText(/Comuna/i), { target: { value: "1" } });

    const form = screen.getByRole("form", { name: /registro/i });
    fireEvent.submit(form);

    expect(window.alert).toHaveBeenCalledWith("‚úÖ Registro exitoso!");

    // ‚úÖ Verifica limpieza de campos (usando .toBe para comparar valores)
    expect(screen.getByLabelText(/Nombre completo/i).value).toBe("");
    expect(screen.getByLabelText(/Correo/i).value).toBe("");
    expect(screen.getByLabelText("Contrase√±a").value).toBe("");
    expect(screen.getByLabelText("Confirmar contrase√±a").value).toBe("");
    expect(screen.getByLabelText(/Regi√≥n/i).value).toBe("-- Regi√≥n --");
    expect(screen.getByLabelText(/Comuna/i).value).toBe("-- Comuna --");
  });

});